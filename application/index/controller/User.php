<?php

/**

 * Created by PhpStorm.

 * User: Administrator

 * Date: 2019/3/11 0011

 * Time: 上午 10:18

 */

namespace app\index\controller;
use app\index\model\SoftCate;
use app\index\model\PayRecord;
use think\Cache;
use think\Cookie;
use think\Db;
use think\Session;
use think\Controller;

class User extends Common

{

    public $identity;

    public function _initialize()

    {

        parent::_initialize(); // TODO: Change the autogenerated stub

        $user = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        if($user['qq_openid']){

            $identity = 'qq';

        }else if($user['wb_uid']){

            $identity = 'wb';

        }else{

            $identity = 'normal';

        }

        $this->identity = $identity;

        $this->assign('identity',$identity);

    }



    private function checkLogin()

    {

        $userid = Session::get('user_id');

        if(!$userid){

//            $this->error('请您先登录','http://www.662p.com/login');

            $this->redirect('http://www.662p.com/login');

        }

    }



    //会员中心

    public function index()

    {

        $this->checkLogin();

        $userid = Session::get('user_id');

        $data = \app\index\model\Downmember::with('UserGroup')->where(['userid'=>$userid])->find();

        //top导航栏

        $nav = SoftCate::NavCate();

        return $this->fetch('',[

            'nav'=>$nav,

            'current'=>3,

            'data'=>$data

        ]);

    }

    //充值记录

    public function payrecord()

    {

        //检测用户是否登录

        $this->checkLogin();

        //获取消费记录

        $list = PayRecord::where(['userid'=>Session::get('user_id')])->order('is_pay,id desc')->paginate(10);

        return $this->fetch('payback',[

            'data'=>$list,

            'lcurrent'=>1.3

        ]);

    }

    //消费记录

    public function downRecord()

    {

        //检测用户是否登录

        $this->checkLogin();

        //获取消费记录

        $list = Db::table('e_downdown')->where(['userid'=>session('user_id'),'downfen'=>['neq',0]])->paginate(10);

        return $this->fetch('downRecord',[

            'data'=>$list,

            'lcurrent'=>1.4

        ]);

    }

    //编辑会员信息
    public function set()
    {
        $this->checkLogin();
        //获取用户信息
//        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();
        $data = \app\index\model\Downmember::with('UserGroup')->where(['userid'=>session('user_id')])->find();

        //修改用户信息
        if(request()->isAjax()){
            $data = request()->post();
            $data['news'] = trim($data['news'],',');
            $data['update_time'] = time();
            $id = $data['id'];
            unset($data['id']);
            if($id){
                $res = Db::table('e_downmember')->where(['userid'=>$id])->update($data);
                if($res){
                    $msg = ['code'=>1,'info'=>'修改成功'];

                }else{
                    $msg = ['code'=>0,'info'=>'修改失败，请稍后再试！'];
                }
            }else{
                $msg = ['code'=>0,'info'=>'修改失败'];
            }
            return json($msg);
        }


        $jobs_info=Db::table('e_jobs')->select();
        $members=db('downmember')->where(['userid'=>session('user_id')])->find();
        return $this->fetch('',[
            'current'=>3,
            'data'=>$data,
            'members'=>$members,
            'jobs_info'=>$jobs_info,
            'lcurrent'=>1,//使个人资料是当前选中状态

        ]);

    }

    //通知和私信

    public function notice()

    {

        $this->checkLogin();

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        return $this->fetch('',[

            'current'=>3,//使博客资讯是当前选中状态

            'data'=>$data,

            'lcurrent'=>2, //使通知和私信是当前选中状态

        ]);

    }

    //我的设置

    public function myset()

    {

        $this->checkLogin();

        if(request()->isAjax()){

            $token = request()->post('token');

            if($token!==Cache::get('myset_token')){

                return ['code'=>0,'info'=>'token无效，请稍后再试！'];

            }

            $res = Db::table('e_downmember')->where(['pid'=>session('user_id'),'wb_uid'=>['neq','']])->setField('pid',0);

            if($res){

                $msg = ['code'=>1,'info'=>'解除成功！'];

            }else{

                $msg = ['code'=>'解除失败','info'=>'请稍后再试！'];

            }

            return json($msg);

        }

        $token = $this->getRandomStr(16);

        Cache::set('myset_token',$token);

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        $weibo = Db::table('e_downmember')->where(['pid'=>$data['userid'],'wb_uid'=>['neq','']])->find();



        return $this->fetch('',[

            'token'=>$token,

            'data'=>$data,

            'weibo'=>$weibo,

            'current'=>3,

            'lcurrent'=>3

        ]);

    }

    //申请认证

    public function apply()

    {

        $this->checkLogin();

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        return $this->fetch('',[

            'current'=>3,

            'data'=>$data,

            'lcurrent'=>4

        ]);

    }

    //修改密码

    public function setpwd()

    {

        // if($this->identity!=='normal'){

        //     echo "<script>history.go(-1);</script>";die;

        // }

        $this->checkLogin();

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        if(request()->isAjax()){

            $data = request()->post();

            if($data['code']!==cookie('code')){

                return json(['code'=>0,'info'=>'验证码不正确，请稍后再试']);

            }

            if($data['password']!==$data['cpassword']){

                return json(['code'=>0,'info'=>'两次密码输入不一致，请重新输入！']);

            }

            $user = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

            if($user['mobile']!==$data['mobile']){

                return json(['code'=>0,'info'=>'手机号码不匹配！']);

            }

            $password = md5($data['password']);

            $res = Db::table('e_downmember')->where(['userid'=>session('user_id')])->update(['password'=>$password,'update_time'=>time()]);

            if($res){

                $msg = ['code'=>1,'info'=>'密码重置成功'];

            }else{

                $msg = ['code'=>0,'info'=>'密码重置失败，请稍后再试！'];

            }

            return json($msg);

        }

        return $this->fetch('',[

            'current'=>3,

            'data'=>$data,

            'lcurrent'=>5

        ]);

    }

    //发送验证码

    public function sendCode()

    {

        $this->checkLogin();

        if(request()->isAjax()){

            $data = request()->post();

            if(!$data['mobile']){

                return json(['code'=>0,'info'=>'手机号与账号不匹配，请检查手机号是否正确，如需改绑手机号，请前往修改手机号！']);

            }

            $user = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

            if(!$user['mobile']){

                return json(['code'=>0,'info'=>'手机号与账号不匹配，请检查手机号是否正确，如需改绑手机号，请前往修改手机号！']);

            }

            $code = mt_rand(100000,999999);

            $mobile = $data['mobile'];

            import('SMS.smsbao',EXTEND_PATH,'.php');

            $smsSend = new \smsbao(config('sms.bao')['user'],config('sms.bao')['pwd'],$mobile,"【开发吗】您的验证码为".$code."，在30分钟内有效，如果不是本人操作，请忽略此短信。");

            $res = $smsSend->send();

            if($res){



                Cookie::set('code',$code,1800);



                $msg = ['code'=>1,'info'=>'验证码已下发至您的手机了，请您注意查看！'];



            }else{



                $msg = ['code'=>0,'info'=>'验证码发送失败，请与客服人员联系！'];



            }

            return json($msg);

        }

    }

    //修改邮箱

    public function setEmail()

    {

        $this->checkLogin();



        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        if(request()->isAjax()){

            $data = request()->post();

            if($data['token']!==Cache::get('token')){

                return json(['code'=>0,'info'=>'无效的请求！']);

            }

            if($data['code']!==cookie('code')){

                return json(['code'=>0,'info'=>'验证码不正确，请稍后再试！']);

            }

            $res = Db::table('e_downmember')->where(['userid'=>session('user_id')])->update(['email'=>$data['email'],'update_time'=>time()]);

            if($res){

                $msg = ['code'=>1,'info'=>'修改成功'];

            }else{

                $msg = ['code'=>0,'info'=>'修改失败'];

            }

            return json($msg);

        }

        $token = $this->getRandomStr(16);

        Cache::set('token',$token);

        return $this->fetch('',[

            'current'=>3,

            'data'=>$data,

            'token'=>$token,

            'lcurrent'=>6

        ]);

    }

    //修改手机号

    public function setMobile()

    {

        $this->checkLogin();

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        if(request()->isAjax()){

            $data = request()->post();

            if($data['token']!==Cache::get('token')){

                return json(['code'=>0,'info'=>'无效的请求！']);

            }

            if($data['code']!==cookie('code')){

                return json(['code'=>0,'info'=>'验证码不正确，请稍后再试！']);

            }



            $user = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

            if($user['mobile']!==$data['omobile']){

                return json(['code'=>0,'info'=>'预留手机号码不正确，请重新输入！']);

            }

            if(!$data['mobile']){

                return json(['code'=>0,'info'=>'请输入新的手机号码！']);

            }

            $res = Db::table('e_downmember')->where(['userid'=>session('user_id')])->update(['mobile'=>$data['mobile'],'update_time'=>time()]);

            if($res){

                $msg = ['code'=>1,'info'=>'修改成功'];

            }else{

                $msg = ['code'=>0,'info'=>'修改失败'];

            }

            return json($msg);

        }

        $token = $this->getRandomStr(16);

        Cache::set('token',$token);

        return $this->fetch('',[

            'current'=>3,

            'data'=>$data,

            'token'=>$token,

            'lcurrent'=>7

        ]);

    }

    //修改头像

    public function setAvator()

    {

        $this->checkLogin();

        $data = Db::table('e_downmember')->where(['userid'=>session('user_id')])->find();

        return $this->fetch('user/avator',[

            'current'=>3,

            'data'=>$data,

            'lcurrent'=>8

        ]);

    }

    //获取随机字符串

    private function getRandomStr($len, $special=false){

        $chars = array(

            "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",

            "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",

            "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G",

            "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",

            "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2",

            "3", "4", "5", "6", "7", "8", "9"

        );



        if($special){

            $chars = array_merge($chars, array(

                "!", "@", "#", "$", "?", "|", "{", "/", ":", ";",

                "%", "^", "&", "*", "(", ")", "-", "_", "[", "]",

                "}", "<", ">", "~", "+", "=", ",", "."

            ));

        }



        $charsLen = count($chars) - 1;

        shuffle($chars);                            //打乱数组顺序

        $str = '';

        for($i=0; $i<$len; $i++){

            $str .= $chars[mt_rand(0, $charsLen)];    //随机取出一位

        }

        return $str;

    }

}